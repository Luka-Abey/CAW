[{"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\index.tsx":"1","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\App.tsx":"2","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\routes\\Routes.tsx":"3","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\routes\\RouteConstants.ts":"4","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Layout\\Layout.tsx":"5","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\Home\\Home.tsx":"6","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\feedbackService.ts":"7","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Footer\\Footer.tsx":"8","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Header\\Header.tsx":"9","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Wallpaper\\Wallpaper.tsx":"10","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\submissionService.ts":"11","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\config.ts":"12","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Card\\Card.tsx":"13","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\Submissions\\Submissions.tsx":"14","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\FormSubmission\\FormSubmission.tsx":"15","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\SingleSubmission\\SingleSubmission.tsx":"16"},{"size":231,"mtime":1610758278756,"results":"17","hashOfConfig":"18"},{"size":149,"mtime":1610758278744,"results":"19","hashOfConfig":"18"},{"size":977,"mtime":1612738346317,"results":"20","hashOfConfig":"18"},{"size":190,"mtime":1612738188895,"results":"21","hashOfConfig":"18"},{"size":1220,"mtime":1611774907562,"results":"22","hashOfConfig":"18"},{"size":8614,"mtime":1612627556624,"results":"23","hashOfConfig":"18"},{"size":1308,"mtime":1612739870473,"results":"24","hashOfConfig":"18"},{"size":1112,"mtime":1611531236393,"results":"25","hashOfConfig":"18"},{"size":202,"mtime":1610758278747,"results":"26","hashOfConfig":"18"},{"size":304,"mtime":1611531932707,"results":"27","hashOfConfig":"18"},{"size":988,"mtime":1612640672539,"results":"28","hashOfConfig":"18"},{"size":152,"mtime":1612105882880,"results":"29","hashOfConfig":"18"},{"size":1607,"mtime":1612741662388,"results":"30","hashOfConfig":"18"},{"size":1446,"mtime":1612737542412,"results":"31","hashOfConfig":"18"},{"size":8812,"mtime":1612737485637,"results":"32","hashOfConfig":"18"},{"size":1288,"mtime":1612741653969,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"ftiean",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\index.tsx",[],["71","72"],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\App.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\routes\\Routes.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\routes\\RouteConstants.ts",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Layout\\Layout.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\Home\\Home.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\feedbackService.ts",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Footer\\Footer.tsx",["73","74"],"import React from 'react';\r\n\r\nconst Footer: React.FC = () => (\r\n    <div className=\"footer-basic\">\r\n        <footer>    \r\n            <div className=\"social\">\r\n                <a href=\"https://www.facebook.com/CommunityActionWaste\" target=\"_blank\">\r\n                    <i className=\"fab fa-facebook-f\" />\r\n                </a>\r\n            </div>\r\n            <ul className=\"list-inline\">\r\n                <li className=\"list-inline-item\"><a href=\"#\">Home</a></li>\r\n                <li className=\"list-inline-item\"><a href=\"/submission\">Submit An Idea</a></li>\r\n                <li className=\"list-inline-item\"><a href=\"/feedback\">Submitted Ideas</a></li>\r\n            </ul>\r\n            <p className=\"contact-us\">Contact Us:</p>\r\n\r\n            <ul className=\"list-inline\">\r\n                {/* <li className=\"list-inline-item\">Phone Lily: 07498577571</li> */}\r\n                <li className=\"list-inline-item\">Email: communityactionwaste@gmail.com</li>\r\n            </ul>\r\n            <p className=\"copyright\">Community Action On Waste Â© 2021</p>\r\n        </footer>\r\n    </div>\r\n);\r\n\r\nexport default Footer;\r\n","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Wallpaper\\Wallpaper.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\submissionService.ts",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\config.ts",["75"],"export default {\r\n    baseUrl: 'https://caw-server.herokuapp.com/api' // once the server is up online (on heroku), we'll need to update this. \r\n  };\r\n  ","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Card\\Card.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\Submissions\\Submissions.tsx",["76","77","78","79"],"import React, { useEffect, useState } from 'react';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport Wallpaper from '../../components/Wallpaper/Wallpaper';\r\nimport FeedbackService from '../../services/feedbackService';\r\nimport ReceiveSubmissionType from '../../models/ReceiveSubmissionType';\r\nimport Card from '../../components/Card/Card';\r\nconst Feedback: React.FC = () => { \r\n  \r\n  const fService = new FeedbackService;\r\n  const [results, setResults] = useState(new Array<ReceiveSubmissionType>());\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // on load \r\n  useEffect(() => {\r\n      fetchSubmissions();\r\n  }, []);\r\n\r\n\r\n   const fetchSubmissions = async () => { \r\n      await fService.getSubmissions().then(response => {\r\n      setResults(response);\r\n      setLoading(false);\r\n    })\r\n  } \r\n\r\n\r\n  return (  \r\n  <>\r\n    <Wallpaper />\r\n    <div className=\"feedback-content\">\r\n        <h1>No ideas have been submitted Yet:</h1>\r\n        <h3>Please check back soon!</h3>\r\n      <hr/>\r\n    </div> \r\n\r\n    <ul className=\"submission-list\">\r\n      {\r\n      results?.map((submission, index) => \r\n        <Card key={index} title={submission.title} description={submission.description} imageUrl={submission.image == undefined || submission.image.length < 1 ?  \"https://imgur.com/n5VyLq2.png\" : submission.image[0]} submissionId={submission._id}/>\r\n      )}\r\n    </ul>\r\n\r\n    <Footer /> \r\n  </> \r\n  )\r\n};\r\n\r\nexport default Feedback;\r\n","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\FormSubmission\\FormSubmission.tsx",["80","81","82","83","84"],"import React,  { useEffect, useState } from 'react';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport Wallpaper from '../../components/Wallpaper/Wallpaper';\r\nimport submissionService from '../../services/submissionService';\r\nimport SendSubmissionType from '../../models/SendSubmissionType';\r\nimport { setSourceMapRange } from 'typescript';\r\n\r\nconst Submission: React.FC = () => {\r\n\r\n  const sService = new submissionService;\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [imageArray, setImageArray] = useState(new Array<String>());\r\n  const [urlArray, setUrlArray] = useState(new Array<string>());\r\n  const [key, setKey] = useState(\"\");\r\n  const [submission, setSubmission] = useState<SendSubmissionType>({\r\n    title: \"\",\r\n    description: \"\",\r\n    benefit: \"\",\r\n    contribution: \"\",\r\n    skills: \"\",\r\n    costs: \"\",\r\n    maintenance: \"\",\r\n    other: \"\",\r\n    image: []\r\n  });\r\n\r\n  const [finalSubmission, setFinalSubmission] = useState<SendSubmissionType>({\r\n    title: \"\",\r\n    description: \"\",\r\n    benefit: \"\",\r\n    contribution: \"\",\r\n    skills: \"\",\r\n    costs: \"\",\r\n    maintenance: \"\",\r\n    other: \"\",\r\n    image: []\r\n  });\r\n\r\n  // Get triggered when finalSubmssion state is changed, \r\n  // which only happens in handleSubmit function.\r\n  // Need more rigorous error handling.\r\n  useEffect(() => {\r\n    if (finalSubmission.title !== \"\") { \r\n      sService.postSubmission(finalSubmission).catch(e => console.log(\"something went wrong: \" + e));\r\n    }\r\n }, [finalSubmission]);\r\n  \r\n  // nice-to-have show filenames when selected + a way to remove a file. \r\n  const handleInputText = (e: React.FormEvent<HTMLInputElement>) => {\r\n    const {value, name} = e.currentTarget;  \r\n    setSubmission({ ...submission, [name]: value});\r\n  }\r\n\r\n  const handleTextArea = (e: React.ChangeEvent<HTMLTextAreaElement>) => { \r\n    const {value, name} = e.currentTarget;  \r\n    setSubmission({ ...submission, [name]: value});\r\n  }\r\n\r\n  // upload files to cloudinary, return url\r\n  const uploadFile = async (file: any): Promise<string> => {\r\n    const cloudinaryData = new FormData();\r\n    cloudinaryData.append('file', file);\r\n    cloudinaryData.append('upload_preset', 'communityactiononwaste');\r\n    // send off image file\r\n    const resCloudinary = await fetch(\r\n      'https://api.cloudinary.com/v1_1/dura1eemm/image/upload',\r\n      {\r\n        method: 'POST',\r\n        body: cloudinaryData\r\n      }\r\n    )\r\n    // retrieve url\r\n    const URL = await resCloudinary.json()\r\n    const imageURL = URL.secure_url \r\n\r\n    // store the url(s) in a state variable\r\n    let tempArray = urlArray;\r\n    tempArray.push(imageURL);\r\n    setUrlArray(tempArray); \r\n    return \"done\";\r\n  }\r\n\r\n  // (e: React.ChangeEvent<HTMLInputElement>) was not working... using e: any for now\r\n  const handleImage = async (e: any) => {\r\n    const initialFileUpload = e.target.files;\r\n    // limit of file size in bytes, eg 1048576 == 1mb, 2097152 == 2mb\r\n    const fileSizeLimit = 10485760; // 10 megabyte cloudinary limit\r\n    // iterate through array of files\r\n    [...initialFileUpload].forEach((file: any) => {\r\n      const allowedExtensions = /(\\.jpg|\\.jpeg|\\.png|\\.xbm|\\.tif|\\.ico|\\.svg|\\.webp|\\.pjpeg|\\.avif)$/i; \r\n      // .exec checks if argument string contains string provided and alerts user\r\n      if (!allowedExtensions.exec(file.name)) {\r\n        alert(\"Invalid file type provided. Please try again and click Choose Files\")\r\n        file = null\r\n        resetImage()\r\n      }\r\n      // checks file size is correct and alerts user\r\n      else if (file.size > fileSizeLimit) {\r\n        alert(\"One of your files is too large. Please try again with a compressed/smaller file\")\r\n        file = null\r\n        resetImage()\r\n      }\r\n      else {\r\n        setImageArray(initialFileUpload);\r\n      }\r\n      console.log(file)\r\n    });\r\n  }\r\n  \r\n  const resetImage = () => { \r\n    let randomString = Math.random().toString(36);\r\n    setKey(randomString);\r\n  }\r\n\r\n  // validate submissions & send off the submission.\r\n  const handleSubmit = async (e: React.FormEvent<EventTarget>) => { \r\n    e.preventDefault();\r\n    \r\n    for (let index = 0; index < imageArray.length; index++) {\r\n      await uploadFile(imageArray[index]);\r\n    }\r\n\r\n    // Once react finishes updating this state, it triggers a POST request in the useEffect()\r\n    setFinalSubmission(\r\n      {\r\n        title: submission.title,\r\n        description: submission.description,\r\n        benefit: submission.benefit,\r\n        contribution: submission.contribution,\r\n        skills: submission.skills,\r\n        costs: submission.costs,\r\n        maintenance: submission.maintenance,\r\n        other: submission.other,\r\n        image: urlArray\r\n      });\r\n\r\n    setSubmission(\r\n      {\r\n      title: \"\",\r\n      description: \"\",\r\n      benefit: \"\",\r\n      contribution: \"\",\r\n      skills: \"\",\r\n      costs: \"\",\r\n      maintenance: \"\",\r\n      other: \"\",\r\n      image: []\r\n      }); \r\n      \r\n      resetImage();\r\n}\r\n  \r\n\r\n  return (\r\n  <>\r\n    <Wallpaper />\r\n      <div className=\"submission-content\">\r\n          <h1>Submission Form Coming Soon</h1>\r\n          <h2>Please check back later this week!</h2>\r\n      </div>\r\n      <div className=\"form-container\">\r\n        <form className=\"submission-form\" onSubmit={handleSubmit}>\r\n          <div className=\"form-content-wrapper\">\r\n            <div className=\"form-group\">\r\n              <label >Submission Name (max 20 words)</label>\r\n              <input type=\"text\" className=\"form-control\" maxLength={130} placeholder=\"e.g. The Green Space\" required name=\"title\" onChange={handleInputText} value={submission.title}/>\r\n              <div className=\"invalid-feedback\">\r\n                Please choose a name of your submission.\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label >In a few sentences, please explain your idea (max 200 words)</label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} required name=\"description\" onChange={handleTextArea} value={submission.description}/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label >Who would benefit from your idea? (max 200 words)</label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} name=\"benefit\" onChange={handleTextArea} value={submission.benefit}></textarea>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label >How will your idea make a positive contribution to the Hyde park area? (max 200 words)</label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} name=\"contribution\" onChange={handleTextArea} value={submission.contribution}></textarea>\r\n            </div>          \r\n            <div className=\"form-group\">\r\n              <label >Are there any practical skills needed to implement your idea? (max 200 words)</label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} name=\"skills\" onChange={handleTextArea} value={submission.skills}></textarea>\r\n            </div>          \r\n            <div className=\"form-group\">\r\n              <label >Outline the rough costs for your idea - how will it fit into the Â£250 budget? (max 200 words)</label>\r\n              <label className=\"sub-label\">No need to be exact, just a rough estimate will do</label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} placeholder=\"\" name=\"costs\" onChange={handleTextArea} value={submission.costs}></textarea>\r\n            </div>          \r\n            <div className=\"form-group\">\r\n              <label >Will it need maintenance? If so, how might this happen? (max 200 words)</label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} name=\"maintenance\" onChange={handleTextArea} value={submission.maintenance}></textarea>\r\n            </div>          \r\n            <div className=\"form-group\">\r\n              <label >Is there anything else to consider? (max 200 words)</label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} name=\"other\" onChange={handleTextArea} value={submission.other}></textarea>\r\n            </div>   \r\n            \r\n          </div>\r\n          <div className=\"form-check\">\r\n            <label>Feel free to draw or add example images which might help us to imagine your idea </label>\r\n            <input type=\"file\" className=\"form-control-file\" name=\"image\" onChange={handleImage} id=\"fileInput\" multiple accept=\"image/*\" key={key || \"\"}/>\r\n          </div>\r\n          <div>\r\n            {loading ? (<h3>Loading image...</h3>) : <h3/>}\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\" >Submit</button>\r\n        </form>\r\n      </div>\r\n    <Footer /> \r\n  </>\r\n  )\r\n};\r\nexport default Submission;\r\n","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\SingleSubmission\\SingleSubmission.tsx",["85","86","87","88","89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":7,"column":17,"nodeType":"96","endLine":7,"endColumn":89},{"ruleId":"97","severity":1,"message":"98","line":12,"column":50,"nodeType":"96","endLine":12,"endColumn":62},{"ruleId":"99","severity":1,"message":"100","line":1,"column":1,"nodeType":"101","endLine":3,"endColumn":5},{"ruleId":"102","severity":1,"message":"103","line":9,"column":20,"nodeType":"104","messageId":"105","endLine":9,"endColumn":39,"fix":"106"},{"ruleId":"107","severity":1,"message":"108","line":11,"column":10,"nodeType":"109","messageId":"110","endLine":11,"endColumn":17},{"ruleId":"111","severity":1,"message":"112","line":16,"column":6,"nodeType":"113","endLine":16,"endColumn":8,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":39,"column":116,"nodeType":"117","messageId":"118","endLine":39,"endColumn":118},{"ruleId":"107","severity":1,"message":"119","line":6,"column":10,"nodeType":"109","messageId":"110","endLine":6,"endColumn":27},{"ruleId":"102","severity":1,"message":"103","line":10,"column":20,"nodeType":"104","messageId":"105","endLine":10,"endColumn":41,"fix":"120"},{"ruleId":"107","severity":1,"message":"121","line":12,"column":19,"nodeType":"109","messageId":"110","endLine":12,"endColumn":29},{"ruleId":"111","severity":1,"message":"122","line":47,"column":5,"nodeType":"113","endLine":47,"endColumn":22,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":208,"column":54,"nodeType":"96","endLine":208,"endColumn":59},{"ruleId":"107","severity":1,"message":"126","line":14,"column":24,"nodeType":"109","messageId":"110","endLine":14,"endColumn":37},{"ruleId":"107","severity":1,"message":"127","line":16,"column":13,"nodeType":"109","messageId":"110","endLine":16,"endColumn":25},{"ruleId":"107","severity":1,"message":"128","line":18,"column":11,"nodeType":"109","messageId":"110","endLine":18,"endColumn":19},{"ruleId":"107","severity":1,"message":"129","line":21,"column":15,"nodeType":"109","messageId":"110","endLine":21,"endColumn":18},{"ruleId":"111","severity":1,"message":"130","line":28,"column":34,"nodeType":"113","endLine":28,"endColumn":36,"suggestions":"131"},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"134","text":"135"},"@typescript-eslint/no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchSubmissions'. Either include it or remove the dependency array.","ArrayExpression",["136"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setSourceMapRange' is defined but never used.",{"range":"137","text":"135"},"'setLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sService'. Either include it or remove the dependency array.",["138"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'setSubmission' is assigned a value but never used.","'submissionId' is assigned a value but never used.","'fService' is assigned a value but never used.","'sId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params'. Either include it or remove the dependency array.",["139"],"no-global-assign","no-unsafe-negation",[433,433],"()",{"desc":"140","fix":"141"},[436,436],{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [fetchSubmissions]",{"range":"146","text":"147"},"Update the dependencies array to be: [finalSubmission, sService]",{"range":"148","text":"149"},"Update the dependencies array to be: [props.match.params]",{"range":"150","text":"151"},[634,636],"[fetchSubmissions]",[1491,1508],"[finalSubmission, sService]",[991,993],"[props.match.params]"]