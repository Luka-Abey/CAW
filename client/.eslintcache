[{"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\index.tsx":"1","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\App.tsx":"2","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\routes\\Routes.tsx":"3","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\routes\\RouteConstants.ts":"4","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\Home\\Home.tsx":"5","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\Submissions\\Submissions.tsx":"6","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Layout\\Layout.tsx":"7","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\FormSubmission\\FormSubmission.tsx":"8","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\SingleSubmission\\SingleSubmission.tsx":"9","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\feedbackService.ts":"10","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Footer\\Footer.tsx":"11","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Wallpaper\\Wallpaper.tsx":"12","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\submissionService.ts":"13","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Header\\Header.tsx":"14","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Card\\Card.tsx":"15","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\SingleSubmission\\components\\CommentSection.tsx":"16","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\config.ts":"17","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\commentService.tsx":"18","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\SingleSubmission\\components\\NewComment.tsx":"19","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\SingleSubmission\\components\\ImageCarousel.tsx":"20"},{"size":231,"mtime":1610758278756,"results":"21","hashOfConfig":"22"},{"size":149,"mtime":1610758278744,"results":"23","hashOfConfig":"22"},{"size":977,"mtime":1612738346317,"results":"24","hashOfConfig":"22"},{"size":190,"mtime":1612738188895,"results":"25","hashOfConfig":"22"},{"size":8614,"mtime":1612627556624,"results":"26","hashOfConfig":"22"},{"size":2587,"mtime":1612984994890,"results":"27","hashOfConfig":"22"},{"size":1220,"mtime":1611774907562,"results":"28","hashOfConfig":"22"},{"size":13222,"mtime":1613310038287,"results":"29","hashOfConfig":"22"},{"size":4486,"mtime":1613343718695,"results":"30","hashOfConfig":"22"},{"size":1308,"mtime":1612739870473,"results":"31","hashOfConfig":"22"},{"size":1112,"mtime":1611531236393,"results":"32","hashOfConfig":"22"},{"size":304,"mtime":1611531932707,"results":"33","hashOfConfig":"22"},{"size":988,"mtime":1612640672539,"results":"34","hashOfConfig":"22"},{"size":202,"mtime":1610758278747,"results":"35","hashOfConfig":"22"},{"size":1607,"mtime":1612741662388,"results":"36","hashOfConfig":"22"},{"size":2057,"mtime":1613342985755,"results":"37","hashOfConfig":"22"},{"size":152,"mtime":1612105882880,"results":"38","hashOfConfig":"22"},{"size":682,"mtime":1612984994891,"results":"39","hashOfConfig":"22"},{"size":2539,"mtime":1613342306628,"results":"40","hashOfConfig":"22"},{"size":1171,"mtime":1613332644991,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"ftiean",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\index.tsx",[],["88","89"],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\App.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\routes\\Routes.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\routes\\RouteConstants.ts",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\Home\\Home.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\Submissions\\Submissions.tsx",["90","91","92","93"],"import React, { useEffect, useState } from 'react';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport Wallpaper from '../../components/Wallpaper/Wallpaper';\r\nimport FeedbackService from '../../services/feedbackService';\r\nimport ReceiveSubmissionType from '../../models/ReceiveSubmissionType';\r\nimport Card from '../../components/Card/Card';\r\nconst Feedback: React.FC = () => { \r\n  \r\n  const fService = new FeedbackService;\r\n  const [results, setResults] = useState(new Array<ReceiveSubmissionType>());\r\n  const [loading, setLoading] = useState(true);\r\n  const exampleSubmissionId = '602427dcd0cc890004c267cf'\r\n\r\n  // on load \r\n  useEffect(() => {\r\n      fetchSubmissions();\r\n  }, []);\r\n\r\n\r\n   const fetchSubmissions = async () => { \r\n      await fService.getSubmissions().then(response => {\r\n      setResults(response);\r\n      setLoading(false);\r\n    })\r\n  } \r\n\r\n\r\n  return (  \r\n  <>\r\n    <Wallpaper />\r\n\r\n    <div className=\"feedback-content\">\r\n        <h1>No ideas have been submitted Yet:</h1>\r\n        <h3>Please check back soon!</h3>\r\n      <hr/>\r\n    </div> \r\n\r\n    <ul className=\"submission-list\">\r\n      <Card \r\n        title=\"Example Idea: Communal Green with Seating\" \r\n        imageUrl=\"https://res.cloudinary.com/dura1eemm/image/upload/v1612961433/caw/igcefffzmdrgghcf05e4.png\" \r\n        description=\"Our idea is to create a communal green area with seating. It will have an L shaped wooden bench, with a raised bed in the corner for growing plants, flowers and herbs. Upcycled household items such a...\" \r\n        submissionId={exampleSubmissionId}/>\r\n      {loading ? (\r\n                  <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                  </div>\r\n              ) : \r\n                results?.map((submission, index) => {\r\n                    if(submission._id !== exampleSubmissionId) {\r\n                      return (\r\n                        <Card \r\n                          key={index} \r\n                          title={submission.title} \r\n                          description={submission.description} \r\n                          imageUrl={\r\n                            submission.image == undefined || submission.image.length < 1 ? \"https://imgur.com/n5VyLq2.png\" : submission.image[0]\r\n                          } \r\n                          submissionId={submission._id} />\r\n                      )\r\n                    }\r\n                  }                  \r\n                )\r\n            }\r\n    </ul>\r\n\r\n    <Footer /> \r\n  </> \r\n  )\r\n};\r\n\r\nexport default Feedback;\r\n","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Layout\\Layout.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\FormSubmission\\FormSubmission.tsx",["94","95","96","97"],"import React,  { useEffect, useState } from 'react';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport CustomModal from '../../components/Modal/CustomModal';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Wallpaper from '../../components/Wallpaper/Wallpaper';\r\nimport submissionService from '../../services/submissionService';\r\nimport SendSubmissionType from '../../models/SendSubmissionType';\r\nimport Recaptcha from 'react-recaptcha';\r\nimport { setSourceMapRange } from 'typescript';\r\n\r\nconst Submission: React.FC = () => {\r\n\r\n  const sService = new submissionService;\r\n\r\n  const [isVerified, setIsVerified] = useState(false);\r\n\r\n  const onloadCallback = () => {\r\n    console.log('loaded captcha');\r\n  };\r\n\r\n  const userVerified = () => {\r\n    setIsVerified(true)\r\n  }\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => {\r\n    setShow(false)\r\n    window.location.reload()\r\n  };\r\n\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [imageArray, setImageArray] = useState(new Array<String>());\r\n  const [urlArray, setUrlArray] = useState(new Array<string>());\r\n  const [key, setKey] = useState(\"\");\r\n  const [submission, setSubmission] = useState<SendSubmissionType>({\r\n    title: \"\",\r\n    description: \"\",\r\n    benefit: \"\",\r\n    contribution: \"\",\r\n    skills: \"\",\r\n    costs: \"\",\r\n    maintenance: \"\",\r\n    other: \"\",\r\n    contact: \"\",\r\n    image: []\r\n  });\r\n\r\n  const [finalSubmission, setFinalSubmission] = useState<SendSubmissionType>({\r\n    title: \"\",\r\n    description: \"\",\r\n    benefit: \"\",\r\n    contribution: \"\",\r\n    skills: \"\",\r\n    costs: \"\",\r\n    maintenance: \"\",\r\n    other: \"\",\r\n    contact: \"\",\r\n    image: []\r\n  });\r\n\r\n  // Get triggered when finalSubmssion state is changed, \r\n  // which only happens in handleSubmit function.\r\n  // Need more rigorous error handling.\r\n  useEffect(() => {\r\n    if (finalSubmission.title !== \"\") { \r\n      sService.postSubmission(finalSubmission).catch(e => console.log(\"something went wrong: \" + e));\r\n    }\r\n }, [finalSubmission]);\r\n  \r\n  // nice-to-have show filenames when selected + a way to remove a file. \r\n  const handleInputText = (e: React.FormEvent<HTMLInputElement>) => {\r\n    const {value, name} = e.currentTarget;  \r\n    setSubmission({ ...submission, [name]: value});\r\n  }\r\n\r\n  const handleTextArea = (e: React.ChangeEvent<HTMLTextAreaElement>) => { \r\n    const {value, name} = e.currentTarget;  \r\n    setSubmission({ ...submission, [name]: value});\r\n  }\r\n\r\n  // upload files to cloudinary, return url\r\n  const uploadFile = async (file: any): Promise<string> => {\r\n    const cloudinaryData = new FormData();\r\n    cloudinaryData.append('file', file);\r\n    cloudinaryData.append('upload_preset', 'communityactiononwaste');\r\n    // send off image file\r\n    const resCloudinary = await fetch(\r\n      'https://api.cloudinary.com/v1_1/dura1eemm/image/upload',\r\n      {\r\n        method: 'POST',\r\n        body: cloudinaryData\r\n      }\r\n    )\r\n    // retrieve url\r\n    const URL = await resCloudinary.json()\r\n    const imageURL = URL.secure_url \r\n\r\n    // store the url(s) in a state variable\r\n    let tempArray = urlArray;\r\n    tempArray.push(imageURL);\r\n    setUrlArray(tempArray); \r\n    return \"done\";\r\n  }\r\n\r\n  // (e: React.ChangeEvent<HTMLInputElement>) was not working... using e: any for now\r\n  const handleImage = async (e: any) => {\r\n    const initialFileUpload = e.target.files;\r\n    // limit of file size in bytes, eg 1048576 == 1mb, 2097152 == 2mb\r\n    const fileSizeLimit = 10485760; // 10 megabyte cloudinary limit\r\n    // iterate through array of files\r\n    [...initialFileUpload].forEach((file: any) => {\r\n      const allowedExtensions = /(\\.jpg|\\.jpeg|\\.png|\\.xbm|\\.tif|\\.ico|\\.svg|\\.webp|\\.pjpeg|\\.avif)$/i; \r\n      // .exec checks if argument string contains string provided and alerts user\r\n      if (!allowedExtensions.exec(file.name)) {\r\n        alert(\"Invalid file type provided. Please try again and click Choose Files\")\r\n        file = null\r\n        resetImage()\r\n      }\r\n      // checks file size is correct and alerts user\r\n      else if (file.size > fileSizeLimit) {\r\n        alert(\"One of your files is too large. Please try again with a compressed/smaller file\")\r\n        file = null\r\n        resetImage()\r\n      }\r\n      else {\r\n        setImageArray(initialFileUpload);\r\n      }\r\n      console.log(file)\r\n    });\r\n  }\r\n  \r\n  const resetImage = () => { \r\n    let randomString = Math.random().toString(36);\r\n    setKey(randomString);\r\n  }\r\n\r\n  // validate submissions & send off the submission.\r\n  const handleSubmit = async (e: React.FormEvent<EventTarget>) => { \r\n    e.preventDefault();\r\n    if (!isVerified) {\r\n      alert('Please verify you are not a robot !')\r\n      return\r\n    }\r\n    setLoading(true)\r\n    for (let index = 0; index < imageArray.length; index++) {\r\n      await uploadFile(imageArray[index]);\r\n    }\r\n\r\n    // Once react finishes updating this state, it triggers a POST request in the useEffect()\r\n    setFinalSubmission(\r\n      {\r\n        title: submission.title,\r\n        description: submission.description,\r\n        benefit: submission.benefit,\r\n        contribution: submission.contribution,\r\n        skills: submission.skills,\r\n        costs: submission.costs,\r\n        maintenance: submission.maintenance,\r\n        other: submission.other,\r\n        contact: submission.contact,\r\n        image: urlArray\r\n      });\r\n\r\n    setSubmission(\r\n      {\r\n      title: \"\",\r\n      description: \"\",\r\n      benefit: \"\",\r\n      contribution: \"\",\r\n      skills: \"\",\r\n      costs: \"\",\r\n      maintenance: \"\",\r\n      other: \"\",\r\n      contact: \"\",\r\n      image: []\r\n      }); \r\n      \r\n      resetImage();\r\n      setLoading(false);\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n      handleShow();\r\n      // window.scrollTo({ top: 0, behavior: 'smooth' });\r\n}\r\n  \r\n\r\n  return (\r\n  <>\r\n    <Modal show={show} onHide={handleClose} centered>\r\n      <Modal.Dialog>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Thank you for your submission</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <p>Click through to see and contribute to others' ideas.</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n          <Button variant=\"primary\" href=\"/feedback\">Submissions</Button>\r\n        </Modal.Footer>\r\n      </Modal.Dialog> \r\n    </Modal>\r\n    <Wallpaper />\r\n      <div className=\"submission-content\">\r\n        <div className=\"pretext-wrapper\"> \r\n          <h2 className=\"custom-heading\">Submission Form</h2>\r\n          <hr className=\"hr\" />\r\n          <p className=\"p-text\">Please submit your idea below. If you want some help, see our <a href=\"/submissions/example\" className=\"link-to-example\">example</a> idea for some guidance. Once your idea is submitted, it will be added to our database and displayed on the <a href=\"/submissions\" className=\"link-to-example\">submitted ideas</a> page. There, people will be able to add comments and questions.\r\n          <br/><br/>\r\n          If you would prefer to submit your idea in another format, such as by video or voice recording, please contact us via <a href=\"mailto:communityactionwaste@gmail.com?subject=Alternate Format Submission\" className=\"link-to-example\">email</a> and we can find a way that works for you.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-container\">\r\n        <form className=\"submission-form\" onSubmit={handleSubmit}>\r\n          <div className=\"form-content-wrapper\">\r\n            <div className=\"form-group\">\r\n              <label >Submission Name (max 20 words)</label>\r\n              <input type=\"text\" className=\"form-control\" maxLength={130} required name=\"title\" onChange={handleInputText} value={submission.title}/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label >In a few sentences, please explain your idea (max 200 words)</label>\r\n              <br/>\r\n              <label className=\"sub-label\">This is the ‘what’ of your idea. You could describe what it might look like, talk us through the different parts, or anything else that gives us a basic understanding of what your idea is. </label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} required name=\"description\" onChange={handleTextArea} value={submission.description}/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label >Who would benefit from your idea? (max 200 words)</label>\r\n              <br/>\r\n              <label className=\"sub-label\">Think about the different groups of people who might come into contact with your idea - children, families, shop owners, older people etc. </label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} name=\"benefit\" onChange={handleTextArea} value={submission.benefit} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label >How will your idea make a positive contribution to the Hyde park area? (max 200 words)</label>\r\n              <br/>\r\n              <label className=\"sub-label\">Tell us about the positive changes your idea would bring about. </label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} name=\"contribution\" onChange={handleTextArea} value={submission.contribution} />\r\n            </div>          \r\n            <div className=\"form-group\">\r\n              <label >Are there any practical skills needed to implement your idea? (max 200 words)</label>\r\n              <br/>\r\n              <label className=\"sub-label\">Would something need building or assembling? Please note that you don’t need to be the person with these practical skills, but it’s useful information for gathering a group of volunteers with the right skills for the job! </label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} name=\"skills\" onChange={handleTextArea} value={submission.skills} />\r\n            </div>          \r\n            <div className=\"form-group\">\r\n              <label >Outline the rough costs for your idea - how will it fit into the £250 budget? (max 200 words)</label>\r\n              <br/>\r\n              <label className=\"sub-label\">No need to be exact, just a rough estimate will do.</label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} placeholder=\"\" name=\"costs\" onChange={handleTextArea} value={submission.costs} />\r\n            </div>          \r\n            <div className=\"form-group\">\r\n              <label >Will it need maintenance? If so, how might this happen? (max 200 words)</label>\r\n              <br/>\r\n              <label className=\"sub-label\">Is your idea sort of ‘once it’s done, it’s done’, or would it require some looking after? </label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} name=\"maintenance\" onChange={handleTextArea} value={submission.maintenance} />\r\n            </div>          \r\n            <div className=\"form-group\">\r\n              <label >Is there anything else to consider? (max 200 words)</label>\r\n              <br/>\r\n              <label className=\"sub-label\">Is there anything else you want to tell us about your idea? Or perhaps you’ve got some questions about your idea that you haven’t got the answers to yet? </label>\r\n              <textarea className=\"form-control text-area\" maxLength={3000} name=\"other\" onChange={handleTextArea} value={submission.other} />\r\n            </div>   \r\n            <div className=\"form-group\">\r\n              <label >Contact details (name and email/number)</label>\r\n              <br/>\r\n              <label className=\"sub-label\">We will not share this with anyone - this is just to contact you if we want to discuss implementing your idea!</label>\r\n              <input type=\"text\" className=\"form-control\" maxLength={1000} name=\"contact\" onChange={handleInputText} value={submission.contact} />\r\n            </div>   \r\n          </div>\r\n          <div className=\"form-check\">\r\n            <label>Feel free to draw or add example images which might help us to imagine your idea </label>\r\n            <input type=\"file\" className=\"form-control-file text-center\" name=\"image\" onChange={handleImage} id=\"fileInput\" multiple accept=\"image/*\" key={key || \"\"}/>\r\n          </div>\r\n          <Recaptcha\r\n            sitekey=\"6LcDE1QaAAAAAL56wfQD7anULS07GdV7tcFJsNA9\"\r\n            render=\"explicit\"\r\n            verifyCallback={userVerified}\r\n            onloadCallback={onloadCallback}\r\n            className=\"centerize\"\r\n          />\r\n            {loading ? (\r\n                <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n                  <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                  </div>\r\n                </button>\r\n              ) : \r\n                <button type=\"submit\" className=\"btn btn-primary\" >\r\n                  Submit\r\n                </button>\r\n            }\r\n        </form>\r\n      </div>\r\n    <Footer /> \r\n  </>\r\n  )\r\n};\r\nexport default Submission;\r\n","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\SingleSubmission\\SingleSubmission.tsx",["98"],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\feedbackService.ts",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Footer\\Footer.tsx",["99","100"],"import React from 'react';\r\n\r\nconst Footer: React.FC = () => (\r\n    <div className=\"footer-basic\">\r\n        <footer>    \r\n            <div className=\"social\">\r\n                <a href=\"https://www.facebook.com/CommunityActionWaste\" target=\"_blank\">\r\n                    <i className=\"fab fa-facebook-f\" />\r\n                </a>\r\n            </div>\r\n            <ul className=\"list-inline\">\r\n                <li className=\"list-inline-item\"><a href=\"#\">Home</a></li>\r\n                <li className=\"list-inline-item\"><a href=\"/submission\">Submit An Idea</a></li>\r\n                <li className=\"list-inline-item\"><a href=\"/feedback\">Submitted Ideas</a></li>\r\n            </ul>\r\n            <p className=\"contact-us\">Contact Us:</p>\r\n\r\n            <ul className=\"list-inline\">\r\n                {/* <li className=\"list-inline-item\">Phone Lily: 07498577571</li> */}\r\n                <li className=\"list-inline-item\">Email: communityactionwaste@gmail.com</li>\r\n            </ul>\r\n            <p className=\"copyright\">Community Action On Waste © 2021</p>\r\n        </footer>\r\n    </div>\r\n);\r\n\r\nexport default Footer;\r\n","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Wallpaper\\Wallpaper.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\submissionService.ts",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\components\\Card\\Card.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\SingleSubmission\\components\\CommentSection.tsx",["101","102"],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\config.ts",["103"],"export default {\r\n    baseUrl: 'https://caw-server.herokuapp.com/api' // once the server is up online (on heroku), we'll need to update this. \r\n  };\r\n  ","C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\services\\commentService.tsx",[],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\SingleSubmission\\components\\NewComment.tsx",["104","105","106"],"C:\\Users\\rsaha\\Desktop\\C.A.W\\website\\community-action-on-waste\\client\\src\\pages\\SingleSubmission\\components\\ImageCarousel.tsx",["107","108","109","110"],"\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Carousel } from 'react-bootstrap'\r\n\r\n// Your component own properties\r\ntype PropsType = {\r\n    imageUrls: string[];\r\n}\r\n\r\nconst ImageCarousel: React.FC<PropsType> = ( {imageUrls} ) => {\r\n    \r\n    const [images, setImages] = useState(new Array<string>());\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(imageUrls);\r\n        // If there are no images, set the image carousel to have the logo.\r\n        if (imageUrls.length == 0) { \r\n            setImages([\"https://imgur.com/n5VyLq2.png\"]);\r\n        } \r\n        else { \r\n            setImages(imageUrls);\r\n        }\r\n    }, [images]);\r\n  \r\n    return (\r\n        <>  \r\n            <Carousel>\r\n                { images?.map((image, index) => {\r\n                    <Carousel.Item>\r\n                        <img \r\n                        className=\"d-block w-100\"\r\n                        key={index}\r\n                        src={image}\r\n                        alt=\"image slide\"\r\n                        />\r\n                    </Carousel.Item>\r\n                })}\r\n            </Carousel>\r\n        </>\r\n    ) \r\n};\r\n\r\nexport default ImageCarousel;\r\n\r\n\r\n\r\n\r\n",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":9,"column":20,"nodeType":"117","messageId":"118","endLine":9,"endColumn":39,"fix":"119"},{"ruleId":"120","severity":1,"message":"121","line":17,"column":6,"nodeType":"122","endLine":17,"endColumn":8,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":49,"column":50,"nodeType":"126","messageId":"127","endLine":49,"endColumn":52},{"ruleId":"128","severity":1,"message":"129","line":57,"column":46,"nodeType":"130","messageId":"131","endLine":57,"endColumn":48},{"ruleId":"132","severity":1,"message":"133","line":3,"column":8,"nodeType":"134","messageId":"135","endLine":3,"endColumn":19},{"ruleId":"132","severity":1,"message":"136","line":10,"column":10,"nodeType":"134","messageId":"135","endLine":10,"endColumn":27},{"ruleId":"115","severity":1,"message":"116","line":14,"column":20,"nodeType":"117","messageId":"118","endLine":14,"endColumn":41,"fix":"137"},{"ruleId":"120","severity":1,"message":"138","line":71,"column":5,"nodeType":"122","endLine":71,"endColumn":22,"suggestions":"139"},{"ruleId":"120","severity":1,"message":"140","line":41,"column":8,"nodeType":"122","endLine":41,"endColumn":10,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":7,"column":17,"nodeType":"144","endLine":7,"endColumn":89},{"ruleId":"145","severity":1,"message":"146","line":12,"column":50,"nodeType":"144","endLine":12,"endColumn":62},{"ruleId":"132","severity":1,"message":"147","line":17,"column":9,"nodeType":"134","messageId":"135","endLine":17,"endColumn":19},{"ruleId":"120","severity":1,"message":"148","line":31,"column":6,"nodeType":"122","endLine":31,"endColumn":14,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":1,"column":1,"nodeType":"152","endLine":3,"endColumn":5},{"ruleId":"132","severity":1,"message":"153","line":1,"column":18,"nodeType":"134","messageId":"135","endLine":1,"endColumn":27},{"ruleId":"132","severity":1,"message":"136","line":4,"column":10,"nodeType":"134","messageId":"135","endLine":4,"endColumn":27},{"ruleId":"115","severity":1,"message":"116","line":14,"column":20,"nodeType":"117","messageId":"118","endLine":14,"endColumn":38,"fix":"154"},{"ruleId":"128","severity":1,"message":"129","line":18,"column":30,"nodeType":"130","messageId":"131","endLine":18,"endColumn":32},{"ruleId":"120","severity":1,"message":"155","line":24,"column":8,"nodeType":"122","endLine":24,"endColumn":16,"suggestions":"156"},{"ruleId":"124","severity":1,"message":"157","line":29,"column":46,"nodeType":"126","messageId":"158","endLine":29,"endColumn":48},{"ruleId":"159","severity":1,"message":"160","line":31,"column":25,"nodeType":"144","endLine":36,"endColumn":27},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"163","text":"164"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchSubmissions'. Either include it or remove the dependency array.","ArrayExpression",["165"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'CustomModal' is defined but never used.","Identifier","unusedVar","'setSourceMapRange' is defined but never used.",{"range":"166","text":"164"},"React Hook useEffect has a missing dependency: 'sService'. Either include it or remove the dependency array.",["167"],"React Hook useEffect has a missing dependency: 'fetchSubmission'. Either include it or remove the dependency array.",["168"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'renderDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchSubmissionComments'. Either include it or remove the dependency array.",["169"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.",{"range":"170","text":"164"},"React Hook useEffect has a missing dependency: 'imageUrls'. Either include it or remove the dependency array. If 'setImages' needs the current value of 'imageUrls', you can also switch to useReducer instead of useState and read 'imageUrls' in the reducer.",["171"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",[433,433],"()",{"desc":"172","fix":"173"},[629,629],{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},[483,483],{"desc":"180","fix":"181"},"Update the dependencies array to be: [fetchSubmissions]",{"range":"182","text":"183"},"Update the dependencies array to be: [finalSubmission, sService]",{"range":"184","text":"185"},"Update the dependencies array to be: [fetchSubmission]",{"range":"186","text":"187"},"Update the dependencies array to be: [fetchSubmissionComments, render]",{"range":"188","text":"189"},"Update the dependencies array to be: [imageUrls, images]",{"range":"190","text":"191"},[692,694],"[fetchSubmissions]",[2098,2115],"[finalSubmission, sService]",[1297,1299],"[fetchSubmission]",[842,850],"[fetchSubmissionComments, render]",[638,646],"[imageUrls, images]"]